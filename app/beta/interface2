import sys
from PyQt5.QtWidgets import QWidget, QLabel, QApplication, QPushButton, QLineEdit, QGridLayout, QMessageBox
from PyQt5.QtGui import QIntValidator
from calcul_nombre_dispositions import *


class Example(QWidget):

    def __init__(self):
        super().__init__()

        self.initUI()

    def initUI(self):
       
        self.resize(600,350)
        self.setWindowTitle('Super Dojo Calculator')

        
        # champs de dimensions
        longueur = QLabel('Longueur (en nombre de tatamis entre 1 et 25)')
        largeur = QLabel('Largeur (en nombre de tatamis entre 1 et 25)')

        # choix des limites de validation des saisies de dimension
        validator = QIntValidator(1, 25, self)

        # saisie des dimensions
        self.longueurEdit = QLineEdit(self)
        self.largeurEdit = QLineEdit(self)
        
        # validation des dimensions
        self.longueurEdit.setValidator(validator)
        self.largeurEdit.setValidator(validator)

        
        # mise en place d'une grille pour faciliter le placements des objets
        grid = QGridLayout()
        grid.setSpacing(20)

        grid.addWidget(longueur, 2, 0)
        grid.addWidget(self.longueurEdit, 2, 1)


        grid.addWidget(largeur, 3, 0)
        grid.addWidget(self.largeurEdit, 3, 1)

        # mise en place de texte pour faciliter la comprehension
        text1 = QLabel('Entrez la dimension de votre dojo:', self)
        grid.addWidget(text1, 1, 0)
        
        text2 = QLabel('Que cherchez vous?', self)
        grid.addWidget(text2, 4, 0)

        # creation des boutons
        bouton1 = QPushButton("Savoir si il existe une disposition pour le dojo")
        bouton2 = QPushButton("Connaître le nombre de dispositions possibles")
        bouton3 = QPushButton("Connaître le nombre de tatamis 2x1 nécéssaires pour la taille du dojo")
        bouton4 = QPushButton("Afficher une disposition")
        bouton5 = QPushButton("Afficher toutes les dispositions possibles")
        
        # placement des boutons
        grid.addWidget(bouton1, 5, 1)
        grid.addWidget(bouton2, 6, 1)
        grid.addWidget(bouton3, 6, 2)
        grid.addWidget(bouton4, 7, 1)
        grid.addWidget(bouton5, 7, 2)

        # connecter les boutons
        bouton1.clicked.connect(self.on_click1)
        bouton2.clicked.connect(self.on_click2)
        bouton3.clicked.connect(self.on_click3)
        bouton4.clicked.connect(self.on_click4)
        bouton5.clicked.connect(self.on_click5)

        # bouton supplementaire pour fermer
        boutonFermer = QPushButton("Fermer", self)
        boutonFermer.setToolTip("Fermer l'application")
        boutonFermer.clicked.connect(self.close)
        grid.addWidget(boutonFermer, 8, 4)

        
        self.setLayout(grid)
        self.show()
        

    def on_click1(self):
        # suie validation pour traiter les cas des dimensions nulles ou vides
        if (self.longueurEdit.text()==""):
            longueur_dojo = 0
        else:
            longueur_dojo = int(self.longueurEdit.text())
        
        if (self.largeurEdit.text()==""):
            largeur_dojo = 0
        else:
            largeur_dojo = int(self.largeurEdit.text())
        
        if (longueur_dojo==0) or (largeur_dojo==0):
            msgEr = QMessageBox()
            msgEr.setIcon(QMessageBox.Warning)
            msgEr.setText("Erreur de saisie des dimensions")
            msgEr.setInformativeText("Aucune dimension ne peut avoir une valeur nulle ou vide")
            msgEr.setStandardButtons(QMessageBox.Ok)
            msgEr.exec()
        
        # affichage de la reponse a l'utilisateur
        else:
            self.nombre_disposition = nombre_de_dispositions(largeur_dojo, longueur_dojo)
            
            if  self.nombre_disposition  :
                textboxValue = "Il existe au moins une disposition avec des tatamis 2x1 pour ce dojo"
            else:
                textboxValue = "Il n'existe pas de disposition possible avec des tatamis 2x1 pour ce dojo"
        
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Information)
            msg.setText("Existe-t-il une disposition pour le dojo?")
            msg.setInformativeText(textboxValue)
            #msg.setDetailedText("The details are as follows:")
            msg.setStandardButtons(QMessageBox.Ok)
            msg.exec()

        
    def on_click2(self):
        # suie validation pour traiter les cas des dimensions nulles ou vides
        if (self.longueurEdit.text()==""):
            longueur_dojo = 0
        else:
            longueur_dojo = int(self.longueurEdit.text())
        
        if (self.largeurEdit.text()==""):
            largeur_dojo = 0
        else:
            largeur_dojo = int(self.largeurEdit.text())
        
        if (longueur_dojo==0) or (largeur_dojo==0):
            msgEr = QMessageBox()
            msgEr.setIcon(QMessageBox.Warning)
            msgEr.setText("Erreur de saisie des dimensions")
            msgEr.setInformativeText("Aucune dimension ne peut avoir une valeur nulle ou vide")
            msgEr.setStandardButtons(QMessageBox.Ok)
            msgEr.exec()
         
        # affichage de la reponse a l'utilisateur
        else:
            self.nombre_disposition = nombre_de_dispositions(largeur_dojo, longueur_dojo)
            
            if self.nombre_disposition in (0,1):
                textboxValue = f"Il existe {self.nombre_disposition} disposition possible"
            else :
                textboxValue = f"Il existe {self.nombre_disposition} dispositions possibles"
                         
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Information)
            msg.setText("Connaître le nombre de dispositions possibles")
            msg.setInformativeText(textboxValue)
            msg.setStandardButtons(QMessageBox.Ok)
            msg.exec()


    def on_click3(self):
        # suie validation pour traiter les cas des dimensions nulles ou vides
        if (self.longueurEdit.text()==""):
            longueur_dojo = 0
        else:
            longueur_dojo = int(self.longueurEdit.text())
        
        if (self.largeurEdit.text()==""):
            largeur_dojo = 0
        else:
            largeur_dojo = int(self.largeurEdit.text())
        
        if (longueur_dojo==0) or (largeur_dojo==0):
            msgEr = QMessageBox()
            msgEr.setIcon(QMessageBox.Warning)
            msgEr.setText("Erreur de saisie des dimensions")
            msgEr.setInformativeText("Aucune dimension ne peut avoir une valeur nulle ou vide")
            #msg.setDetailedText("The details are as follows:")
            msgEr.setStandardButtons(QMessageBox.Ok)
            msgEr.exec()
        
        # affichage de la reponse a l'utilisateur
        else:
            self.nombre_tatamis = nombre_tatamis(largeur_dojo, longueur_dojo)
             
            textboxValue = f"Le nombre de tatamis 2x1 necessaires pour ce dojo est : {self.nombre_tatamis}"
             
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Information)
            msg.setText("Connaître le nombre de tatamis 2x1 nécéssaires pour la taille du dojo")
            msg.setInformativeText(textboxValue)
            msg.setStandardButtons(QMessageBox.Ok)
            msg.exec()
            
            
    def on_click4(self):
        # suie validation pour traiter les cas des dimensions nulles ou vides
        if (self.longueurEdit.text()==""):
            longueur_dojo = 0
        else:
            longueur_dojo = int(self.longueurEdit.text())
        
        if (self.largeurEdit.text()==""):
            largeur_dojo = 0
        else:
            largeur_dojo = int(self.largeurEdit.text())
        
        if (longueur_dojo==0) or (largeur_dojo==0):
            msgEr = QMessageBox()
            msgEr.setIcon(QMessageBox.Warning)
            msgEr.setText("Erreur de saisie des dimensions")
            msgEr.setInformativeText("Aucune dimension ne peut avoir une valeur nulle ou vide")
            #msg.setDetailedText("The details are as follows:")
            msgEr.setStandardButtons(QMessageBox.Ok)
            msgEr.exec()
        
        # affichage de la reponse a l'utilisateur
        else:
            Dojos(largeur_dojo, longueur_dojo,True)
   
        
    def on_click5(self):
        # suie validation pour traiter les cas des dimensions nulles ou vides
        if (self.longueurEdit.text()==""):
            longueur_dojo = 0
        else:
            longueur_dojo = int(self.longueurEdit.text())
        
        if (self.largeurEdit.text()==""):
            largeur_dojo = 0
        else:
            largeur_dojo = int(self.largeurEdit.text())
        
        if (longueur_dojo==0) or (largeur_dojo==0):
            msgEr = QMessageBox()
            msgEr.setIcon(QMessageBox.Warning)
            msgEr.setText("Erreur de saisie des dimensions")
            msgEr.setInformativeText("Aucune dimension ne peut avoir une valeur nulle ou vide")
            #msg.setDetailedText("The details are as follows:")
            msgEr.setStandardButtons(QMessageBox.Ok)
            msgEr.exec()
        
        # affichage de la reponse a l'utilisateur
        else:
            Dispositions(largeur_dojo, longueur_dojo,True)


def main():
    app = QApplication(sys.argv)
    ex = Example()
    sys.exit(app.exec_())
    
    
if __name__ == '__main__':
    main()
